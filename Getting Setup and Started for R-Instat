

#Contents
Getting Setup    2
Using VB.Net – your first dialog.    4
Adding Controls to a dialog.    7
Adding Code to the dialog.    7
Key Principles – code repetition and consistency    11
Testing your dialog    11
\newpage

Getting Setup
To setup for R-Instat development, you need the following on your laptop:
 
1. R (must be the latest version) which you could download from https://cran.r-project.org/
2. RStudio which you could download from https://www.rstudio.com/products/rstudio/download/
3. Visual Studio Community 2015 (https://www.visualstudio.com/vs-2015-product-editions) The download file is small but the installation process requires continuous internet access. If this is an issue, you may want to find an image file for Visual Studio Community 2015 which could be installed offline. 4. Create a GitHub account if you don’t have one already at https://github.com/
5. Log in your GitHub account and create your own fork of the R-Instat project at: https://github.com/africanmathsinitiative/R-Instat by clicking the fork button on your top right and selecting your account.
6. Install the GitHub Extension for Visual Studio by downloading it at https://visualstudio.github.com/
7. Create a local copy of the R-Instat project on your machine (Cloning). To Clone follow this procedure: - 
Open your remote repository from https://github.com/yourusername/R-Instat. You will see an interface similar to the one below.
Click on the green Clone or download button on the right. A small dox appears below it. 
Copy the URL to your repository.
 

 
 
8. From your start menu, open Visual Studio. You will find an interface like the one below. On the bottom left side of the screen, click on Team Explorer to view GitHub connections manager. 
 

 
9. The Team Explorer should be similar to the screen shot below. Click on the Manage Connections button, the green plug-like button on the top of the team explorer window. Then Click on the Clone link and paste the URL you copied from GitHub on the yellow textbox, then click Clone button below it. (This might take some minutes)
 


Using VB.Net – your first dialog.
In R-Instat, we use modal dialog boxes (Windows Forms) as a way of interacting with the user to retrieve information. Below are examples of dialog boxes in R-Instat. The main controls of our dialogs include a Selector, Receiver (Single or Multiple) and the Base Buttons. Other controls are added as needed.
The selector contains available variables (or other objects e.g. graphs) from a data frame. Receivers indicate the selected variable for use in analysis.






Now, let’s look at how to create your first dialog. 
Open Visual Studio and load up the Instat project. From the Project menu, click Add Windows Form and give it an appropriate name from the dialog that appears. All our dialogs start with the prefix dlg. For our case, let’s call our dialog dlgSummaryTest and click Add.



From the design view of the form which appears, as shown below, go to the Properties window which is on your bottom right and change the following properties:
FormBorderStyle to FixedToolWindow
Maximizebox to False
Minimizebox to False
Text to an appropriate dialog name, in this case I will call it “Summary Test”
Start Position to CenterScreen







Currently we have an empty dialog with no controls on it. Let’s look at how to add controls to the dialog. 




Adding Controls to a dialog. 
In our dlgSummaryTest, we will need the dialog to have simply a selector, a receiver and the base buttons. The dialog will run a simple command: calculating the summary of an individual column, hence we need a single receiver.
To add controls on the dialog;-
Scroll through the toolbox, find the required control (in our case we need ucrSelectorByDataFrameAddRemove). Drag and drop the control on the desired position on the dialog.  Select the control, and on the properties window change the name property to ucrSummaryTestSelector. Do the same for the single receiver and call it ucrSummaryTestReceiver and base buttons. Our base buttons always have the name ucrBase. 
On top of the ucrSummaryTestReceiver, add a control from the tool bar called Label by dragging it in the same way. Change its Name property to lblSelectedColumn and the text property to “Selected Column” (the value of text property is what the user will see on the control). Naming conventions for VB.NET controls may be found here which we mostly follow :-  https://msdn.microsoft.com/en-us/library/aa263493(v=vs.60).aspx
You should now have a dialog looking like this 




Adding Code to the dialog. 
Once we have the design of our dialog created, we need to add functionality to it and the controls we’ve added. We can do this by adding code to the dialog to do what we want. 
For our example we need our dialog to be able to give us a summary of a single column by using the summary() function in R. So how do we do this?
To add code to a dialog, double click on the dialog or press F7 to view its code.  This opens the code editor with these lines. In VB.NET we use subroutines to do “things” when events happen. The below code is a subroutine called dlgSummaryTest_Load which handles the event Load. This means that any code inside this sub routine will be executed when the dialog Summary Test loads i.e. when the Load event happens. 
Public Class dlgSummaryTest
    Private Sub dlgSummaryTest_Load(sender As Object, e As EventArgs) Handles MyBase.Load
'Any code inside here will be run when the dialog loads
    End Sub
End Class
Below is the code for our dialog which makes the dialog functional. 

First, you need to add this green part which is the licence for our open source project. Make sure to add the rest of the code as well to make the dialog functional. See explanations in the green comments above the code.
' R- Instat
' Copyright (C) 2015-2017
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License 
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Public Class dlgSummaryTest
'We define a Boolean to know if the dialog is opening for the first time
    Private bFirstLoad As Boolean = True
'We define a Boolean to know if the dialog is being reset
    Private bReset As Boolean = True
'We define an object of class RFunction which is a VB.NET class defined to represent an R function that a dialog will run
    Private clsSummaryFunction As New RFunction

    Private Sub dlgSummaryTest_Load(sender As Object, e As EventArgs) Handles MyBase.Load
'On first load we initialise the dialog
        If bFirstLoad Then
            InitialiseDialog()
            bFirstLoad = False
'If resetting, we set the defaults
        If bReset Then
            SetDefaults()
        End If
'We always set the R code for the controls. This sub updates the values of the dialog controls so that they in sync with the values in the RFunction.
        SetRCodeForControls(bReset)
        bReset = False
'We always translate the dialog in case the language has been changed
        autoTranslate(Me)
'We finally test and set the Ok button to be enabled or disabled.
        TestOkEnabled()
        End If
    End Sub

    'This sub sets initial values for the controls on the dialog
    Private Sub InitialiseDialog()
         'Sets the R parameter linked to this control.
         'In this case, the receiver will contain the variable to summarise. In the R command `summary` the parameter of the object to summarise is called `object`
         'Therefore, we set the parameter of the receiver as a New RParameter object with name `object`. The 0 is the position of the parameter in the R function, with the first parameter being 0.
        ucrSummaryTestReceiver.SetParameter(New RParameter("object", 0))
         'Sets the type of information we want from the receiver to be passed to R. The `IsRFunction` indicates that the parameter should be the column of data with name as in the receiver. The alternative is `IsString` which will just pass the text displayed in the receiver.
        ucrSummaryTestReceiver.SetParameterIsRFunction()

 'Links the selector to the receiver
        ucrSummaryTestReceiver.Selector = ucrSummaryTestSelector 
 'Sets the receiver as the current receiver, ready to accept variables
        ucrSummaryTestReceiver.SetMeAsReceiver()

 'Sets the help page ID for the dialog
 'We don’t know this yet for our dialog so we comment out the line
        'ucrBaseDescribeOneVar.iHelpTopicID =

 'This sets the type of output for our function that will be displayed in the output window. 2 indicates that there will be text output.
' clsRsyntax manages the R script that the dialog will run.
 ucrBase.clsRsyntax.iCallType = 2
    End Sub

    'This sub sets the defaults for the function the dialog runs
    Private Sub SetDefaults()
     'Resets the summary function so that all previous information is cleared
        clsSummaryFunction = New RFunction        

 'Resets the selector so that the current data frame in the spreadsheet is selected by default.
        ucrSummaryTestSelector.Reset()

     'Sets the name of the R command for our function.
        clsSummaryFunction.SetRCommand("summary")
     'Adds any default parameters to our function.
     'This is adding: `maxsum = 7, na.rm = FALSE` to our function.
        clsSummaryFunction.AddParameter("maxsum", 7, iPosition:=1)
        clsSummaryFunction.AddParameter("na.rm", "FALSE", iPosition:=2)

     'Sets the main (base) R command of the R syntax, meaning that clsSummaryFunction is the main function this dialog will run.
        ucrBaseDescribeOneVar.clsRsyntax.SetBaseRFunction(clsSummaryFunction)
    End Sub

    'The links the controls on the dialog to the RFunctions the dialog will run. During the linking process, the controls will read the RFunction that it has been assigned and update its value based on the value so that the RFunctions stored in the dialog are in sync with the values the control displays on the dialog to the user.
    'In this example, we only have one control which links to a parameter in the function.
    Private Sub SetRCodeForControls(bReset As Boolean)
        ucrSummaryTestReceiver.SetRCode(clsSummaryFunction, bReset)
    End Sub

    'Enables/disables Ok depending on whether the required information is complete on the dialog.
    'In our example, if the receiver is not empty, Ok can be clicked.
    Private Sub TestOkEnabled()
        If ucrSummaryTestReceiver.IsEmpty Then
            ucrBase.OKEnabled(False)
        Else
            ucrBase.OKEnabled(True)
        End If
    End Sub

    'This handles the ClickReset event of ucrBase, which is triggered when the Reset button is clicked. Here we set the defaults, set the R code for the controls and run TestOKEnabled().
    Private Sub ucrBase_ClickReset(sender As Object, e As EventArgs) Handles ucrBase.ClickReset
        SetDefaults()
        SetRCodeForControls(True)
        TestOKEnabled()
    End Sub

    'This handles the ControlContentsChanged event of ucrSummaryTestReceiver. This event is triggered when the contents of the receiver control changes in any way. Which is why it is necessary to run TestOKEnabled() on this event.
    Private Sub Controls_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrSummaryTestReceiver.ControlContentsChanged
        TestOKEnabled()
    End Sub
End Class

Key Principles – Code Repetition and Consistency
Where possible we do not repeat code but instead re-use code. When the same code is needed more than once, it is usually sensible for it to be in its own sub routine - e.g. setting the defaults is done when loading the first time and when clicking reset, hence it goes in its own sub called SetDefaults().
The dialog you just created contains relatively little code, considering it is doing a number of tasks, from running an R command, allowing the controls to update/be updated from the R code and passing an R command to run in R and display some output. This is because most of these tasks are in the code of the user controls. Firstly, this reduces code repetition since less code is repeated on each dialog, and secondly, it ensures the software is consistent since the user controls look and behave the same way on every dialog. Although the dialog code is short, you should understand the general system behind the controls to be able to use them properly, once you understand this, even complex dialogs become simple to create.
Most of the sub routines defined here you will find in almost every dialog. Almost all dialogs have:
InitialiseDialog- this sub sets initial values for the dialog and controls. This should include values that will not change on the dialog as this sub is only run the first time the dialog loads.
SetDefaults - This sets the defaults for the (R) functions used in the dialog. This is run when the dialog first loads and when it is reset.
SetRCodeForControls – This links the controls on the dialog to the RFunctions. During the linking, the controls will read its RFunction and update its value to be in sync with the R code. Once the controls are linked to the code, when the value of the control changes, it will update the RFunction it is linked to.
TestOkEnabled – This sub checks whether the user has set the required information for the dialog to run and if so the Ok button is enabled, otherwise it is disabled. This runs when the value of any required control changes.
autoTranslate(Me) – Me refers to the dialog itself and the autotranslate sub takes all the controls in Me (the dialog) and translates any display text to the chosen language.

Testing your dialog
To be able to test if your new dialog works, it needs to be accessible from R-Instat’s menu. We will add a temporary menu item to access the dialog.
1. Open frmMain which is the main form that loads when R-Instat opens. You should see the R-Instat menu at the top of the form.
2. Click on Describe to see the menu items and then click at the bottom of the menu to add a new item. Write “Summary test” for the new item and click enter.
3. Double click on the new item and this should open the code for the form with a sub for the Click event of the new item already created.
4. In this sub write dlgSummaryTest.ShowDialog(). This will show our new dialog when the menu item is clicked.
Now you can run the project by clicking Start in the Visual Studio toolbar.
Load some data and test out your new dialog to see if it works!
If it doesn’t work, go back to the example code above and compare it to your dialog code to check for differences.
If it works, then now look at the R code in the output window. 
If you are familiar with R, then you will see that some of it looks like standard R code, like the summary(...) line. And some is not standard R, like the first line which includes the InstatDataObject part.  This is because R-Instat stores all the data, metadata and objects used in a session in an InstatDataObject, a class we created in R to store the data in a way R-Instat can easily access. Hence, before running any standard R commands, we often have to extract the data we want from the InstatDataObject.
Notice also that the parameters maxsum and na.rm are fixed at 7 and FALSE. But what if the user wants to change these? We could have added a numeric input control for specifying maxsum and a checkbox for na.rm. This is what we did in the real dialog for summary, dlgDescribeOneVariable. If you find this in the project and you will see the extra controls on the design, and looking at the code you will see some similar code to our example above, but with more code for other options that are available on the dialog. A good exercise would now be to look at this code and try to understand everything that it does.
